#! /usr/bin/python3
# -*- coding: utf8 -*-
"""
# Description : change une chaine Vlc sur le PC principal. 
# Paramètres: le nom de la chaine.
Command:

* parses a m3u playlist,
* extracts corresponding matchs of
"""


# URL = "http://212.27.40.238/pub/playlist.m3u"
URL = "http://mafreebox.freebox.fr/freeboxtv/playlist.m3u"

COMMANDE = "play_on_pc"

import urllib.request, urllib.error, urllib.parse

import re
import io

def enum(*sequential, **named):
	enums = dict(zip(sequential, range(len(sequential))), **named)
	reverse = dict((value, key) for key, value in enums.items())
	enums['reverse_mapping'] = reverse
	return type('Enum', (), enums)

class Chaine(object):
	""" Chaine : urls, name of different versions of a chaine."""
	def __init__(self, id_chaine):
		self.id_chaine = id_chaine
		self.urls = {}
		self.nom = None
		self._radio = False
	
	def choisis_nom(self, nom):
		""" internal method : choose main name
			choose shortest name of different names
		"""
		if not self.nom:
			self.nom = nom
		else:
			if len(nom) < len(self.nom):
				self.nom = nom

	def add_url(self, url, nom):
		""" Adds a url & corresponding name to channels alternatives
		"""
		self.urls[nom] = url
		self.choisis_nom(nom)

	quality = enum('LD', 'ND', 'HD')
	
	@classmethod
	def rank(cls, url):
		if 'HD' in url:
			return cls.quality.HD
		elif 'bas' in url:
			return cls.quality.LD
		else:
			return cls.quality.ND

	def get_highest_D_url(self):
		return self.urls[max(self.urls, key = self.rank)]

	def match_name(self, sub):
		""" returns true if the name matches a pattern """
		return sub in self.nom
	
	@property
	def radio(self):
		""" True if channel is a radio channel, default to False"""
		return self._radio

	def set_radio(self):
		""" Sets _radio True 
		call if channel is a radio channel""" 
		self._radio = True

class ParseError(Exception):
	""" Parsing error """
	def __init__(self, descr):
		Exception.__init__(self, descr)


def parse_extinf(line):
	""" Extracts id and name from description line
	"""
	preamble = "#EXTINF:"
	prop = "(\d+),(\d+)"
	nom = "(\w|[ -\(\)])+"

	regex = "^{}{}{}$".format(preamble, prop, nom)
	regex = "^{}{} - ({})".format(preamble, prop, nom)
	extracted = re.search(regex, line, re.UNICODE) 
	if extracted:
		return (int(extracted.group(2)), extracted.group(3))
	else:
		raise ParseError("Error parsing\n{}".format(line))

def parse_exttvcolopt(line, descr_obj):
	""" extracts tvcolopts infos, 
	extra streams infos
	(stub)
	Sample :

	#EXTVLCOPT:ts-es-id-pid
	#EXTVLCOPT:no-video
	#EXTVLCOPT:audio-track-id=1007
	
	"""
	preamble = "#EXTVLCOPT:"
	if preamble in line:
		descr_obj["no-video"] = True

def parse_m3uplaylist(playlist):
	""" returns a dictionary of "Chaines" objects
	indexed by their ids. """
	id_chaine = None
	nom_chaine = None
	chaines = {}
	line = playlist.readline()
	if line != "#EXTM3U\n":
		print("'{line}'".format(line=line))
		print("Warning : unexpected first line")

	attributes = {}
	for line in playlist:
		if line[0] != "#":
			url = line.strip()
			assert(nom_chaine != None)
			if "no-video" in attributes : 
				chaines[id_chaine].set_radio()
			chaines[id_chaine].add_url(url, nom_chaine)
			
			attributes = {}
		else:
			try:
				(id_chaine, nom_chaine) = parse_extinf(line)
				if id_chaine not in chaines:
					chaines[id_chaine] = Chaine(id_chaine)

			except ParseError as error:
				parse_exttvcolopt(line, attributes)
				# print(error)
				# pass
	return chaines


def tests():
	""" Test method """
	
	line = "#EXTINF:0,699 - Record News (bas débit)\n" 
	print(line, type(line))
	(id_, nom) = parse_extinf(line)
	print (id_)
	assert(int(id_) == 699)
	print(("'{}'".format(nom)))
	assert(nom == "Record News (bas débit)")

	sample = """#EXTM3U
#EXTINF:0,700 - Karusel (bas débit)
rtsp://mafreebox.freebox.fr/fbxtv_pub/stream?namespace=1&service=919&flavour=ld
#EXTINF:0,999 - L'Aktu Freebox TV (bas débit)
rtsp://mafreebox.freebox.fr/fbxtv_pub/stream?namespace=1&service=896&flavour=ld
#EXTINF:0,10001 - Europe 1
#EXTVLCOPT:ts-es-id-pid
#EXTVLCOPT:no-video
#EXTVLCOPT:audio-track-id=1001
rtsp://mafreebox.freebox.fr/fbxtv_pub/stream?namespace=1&service=100004
"""
	plop = io.StringIO(sample)

	res = parse_m3uplaylist(plop)
	assert(len(res) == 3)

from optparse import OptionParser
import sys

import os

def get_console_size():
	""" returns current text geometry of terminal"""
	rows, columns = os.popen('stty size', 'r').read().split()
	return int(rows), int(columns)

from fabulous.color import *
from fabulous import xterm256


def print_columns(col_size, liste):
	""" prints ''liste'' elements 
	arranged in columns of size ''col_size'' """
	line = ""
	for name in liste :
		rest = col_size - len(name)
		line = line + name + (" " * rest)
	print(line)

def calc_columns(max_len):
	""" get num & size of columns """
	( _ , columns) = get_console_size()
	num_cols = int(columns) // max_len
	col_size = int(columns) // num_cols

	return (num_cols, col_size)

def column_lister(names):
	""" lists by columns growing in same columns """
	max_size = max([len(nom) for nom in names ])
	
	(num_cols, col_size) = calc_columns(max_size)

	names_1 = names[0:num_cols-1]
	name_iterator = 0
	while name_iterator <= len(names):
		num = min(name_iterator + num_cols, len(names))
		names_1 = names[name_iterator:num]
		name_iterator = name_iterator + num_cols

		print_columns(col_size, names_1)

def order_column_lister(names, to_draw = None):
	""" list by columns, growing left -> right then up -> down """
	total = len(names)

	max_size = max([len(nom) for nom in names ])
	"♪"
	if to_draw:
		names = to_draw

	
	(num_cols, col_size) = calc_columns(max_size)

	by_col = total // num_cols
	if ( by_col * num_cols < total) : 
		by_col = by_col + 1

	assert(by_col * num_cols >= total)

	slices = [list(range(x, min(x + by_col, total) )) for x in range(0, total, by_col) ]
	
	print(slices)
	print(total)
	assert(max(slices[num_cols-1]) ==  total-1)
	for line_num in slices[0]:
		names_in_line = [ 
			names[tranche[line_num]] 
			   for tranche in slices 
			   if line_num < len(tranche)
		]
		print_columns(col_size, names_in_line)

def paged_printer(line):
	""" printer with paged output : 
		* prints a line
		* pauses when printed ''heigth of terminal'' lines"""
	num_line = 0
	(rows, _ ) = get_console_size()
	cont = True
	while cont:
		print(line)
		num_line = num_line + 1
		if(num_line == rows):
			print("pause. Continue or quit")
		# num_line = num_line + 1



def render_on_term (chaine) :
	""" Prepare a string to be rendered on term, 
	depending on channel type"""
	name = chaine.nom
	if (chaine.radio):
		name = "(♪)" + name
		name = highlight256('orangered', name)
	return name


def lister(chaines):
	""" liste les noms des chaines """
	# for chaine in chaines:
	names = [chaines[chaine].nom for chaine in chaines]

	to_draw = [render_on_term(chaines[chaine]) for chaine in chaines ]
		
	order_column_lister(names, to_draw)


def get_unicode_stream(url):
	""" Stream conversion to en utf-8 stream """
	playlist_stream = urllib.request.urlopen(url)
	class ByteToUtf8Decoder(object):
		""" Custom stream encapsulation 
		performing line by line decoding to utf-8"""
		def __init__(self, stream):
			self.stream = stream

		def readline(self):
			""" returns the iterator, conforming to stream interface"""
			line = self.stream.readline()
			if line:
				return str(line, 'utf-8')
			else:
				return None

		def __next__(self):
			line = self.readline()
			if line:
				return line
			else:
				raise StopIteration

		def __iter__(self):
			return self

	return ByteToUtf8Decoder(playlist_stream) # .write(playlist_stream)

import subprocess

def set_url(url):
	""" command to change channel from url stream """ 
	subprocess.Popen([COMMANDE, url])



def get_url_from_name(name, chaines, quality=None):
	""" returns url matching a channel name """
	liste1 = [ chaines[chaine] for chaine in chaines ]
	liste = [ chaine for chaine in liste1 if (chaine.match_name(name))]
	if len(liste)>0:
		
		urls = liste[0].urls
		for canal in urls:
			if quality != None:
				if quality in urls[canal]:
					return urls[canal]
			else:
				return liste[0].get_highest_D_url()
def main():
	""" Main """
	parser = OptionParser()
	parser.add_option("-t", "--test", action = "store_true", default=False,
		   help = "Launches unit tests", dest = "tests")
	parser.add_option("-l", "--list", action = "store_true", 
		   help = "Lister les chaines disponibles", dest="list")

	(options, args) = parser.parse_args()

	if options.tests:
		tests()
		sys.exit(0)
	

	playlist_stream = get_unicode_stream(URL)
	chaines = parse_m3uplaylist(playlist_stream)
	if len(args) <= 0 or options.list:
		lister(chaines)
	else:
		url = get_url_from_name((" ").join(args), chaines)
		set_url(url)
		
if __name__ == "__main__":
	main()	
